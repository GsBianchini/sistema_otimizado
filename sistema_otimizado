def menu():

  menu_text = """\n========== MENU ==========

[d]\tDepositar

[s]\tSacar

[e]\tExtrato

[nc]\tNova Conta

[lc]\tListar Contas

[nu]\tNovo usuário

[q]\tSair

 """

  return input(menu_text + "\nEscolha uma opção: ")



def depositar(saldo, valor, extrato):

  if valor > 0: # Verifica se o valor é maior que zero para evitar depósitos inválidos

    saldo += valor

    extrato += f"Depósito:\tR$ {valor:.2f}\n"

    print("\n=== Depósito realizado com sucesso! ===")

  else:

    print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

  return saldo, extrato



def sacar(saldo, valor, extrato, limite, numero_saques, limite_saques):

  excedeu_saldo = valor > saldo

  excedeu_limite = valor > limite

  excedeu_saque = numero_saques >= limite_saques



  if excedeu_saldo:

    print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")

  elif excedeu_limite:

    print("\n@@@ Operação falhou! O valor do saque excedeu o limite! @@@")

  elif excedeu_saque:

    print("\n@@@ Operação falhou! Excedeu o número de saques diários! @@@")

  elif valor > 0:

    saldo -= valor

    extrato += f"Saque:\t\tR$ {valor:.2f}\n"

    numero_saques += 1

    print("\n=== Saque realizado com sucesso!! ===")

  else:

    print("\n@@@ Operação falhou! Valor registrado é inválido. @@@")

  return saldo, extrato, numero_saques



def exibir_extrato(saldo, extrato):

  print("\n========== EXTRATO ==========")

  print("Não foram realizadas movimentações." if not extrato else extrato)

  print(f"\nSaldo:\t\tR$ {saldo:.2f}")

  print("================================")



def criar_usuario(usuarios):

  cpf = input("Informe o CPF (somente números): ")

  usuario = filtrar_usuario(cpf, usuarios)



  if usuario:

    print("\n@@@ Já existe usuário com este CPF! @@@")

  else:

    nome = input("Informe o nome completo: ")

    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")

    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla do estado): ")

    usuarios.append({"nome": nome, "data_nascimento": data_nascimento, "cpf": cpf, "endereco": endereco})

    print("=== Usuário criado com sucesso! ===")



def filtrar_usuario(cpf, usuarios):

  return next((usuario for usuario in usuarios if usuario["cpf"] == cpf), None)



def criar_conta(agencia, numero_conta, usuarios, contas):

  cpf = input("Informe o CPF do usuário: ")

  usuario = filtrar_usuario(cpf, usuarios)



  if usuario:

    print("\n=== Conta criada com sucesso! ===")

    conta = {"agencia": agencia, "numero_conta": numero_conta, "usuarios": usuario}

    contas.append(conta)

    return conta

  else:

    print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")



def listar_contas(contas):

  print("\n========== LISTA DE CONTAS ==========")

  for conta in contas:

    print(f"Agência: {conta['agencia']}, Conta: {conta['numero_conta']}, Titular: {conta['usuarios']['nome']}")

  print("=====================================")



def main():

  LIMITE_SAQUES = 3

  AGENCIA = "0001"



  saldo = 0

  limite = 500

  extrato = ""

  numero_saques = 0

  usuarios = []

  contas = []

  numero_conta = 1



  while True:

    opcao = menu()



    if opcao == "d":

      valor = float(input("Informe o valor do depósito: "))

      saldo, extrato = depositar(saldo, valor, extrato)



    elif opcao == "s":

      valor = float(input("Informe o valor do saque: "))

      saldo, extrato, numero_saques = sacar(

        saldo=saldo,

        valor=valor,

        extrato=extrato,

        limite=limite,

        numero_saques=numero_saques,

        limite_saques=LIMITE_SAQUES,

      )



    elif opcao == "e":

      exibir_extrato(saldo, extrato)



    elif opcao == "nu":

      criar_usuario(usuarios)



    elif opcao == "nc":

      numero_conta += 1

      conta = criar_conta(AGENCIA, numero_conta, usuarios, contas)



    elif opcao == "lc":

      listar_contas(contas)



    elif opcao == "q":

      break



    else:

      print("Operação inválida! Por favor, selecione novamente a operação desejada.")



if __name__ == "__main__":

  main()